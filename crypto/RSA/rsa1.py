# 导入所需的库
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes  # 获取质数和字节与长整型之间的转换函数
import math  # 数学函数库
from Crypto.Util.number import inverse  # 用于求模逆

# 定义加密的标志字符串
flag = "********************"  # 假设这里存放的是实际的 flag

# 生成两个 1024 位的质数 p 和 q
p = getPrime(1024)
q = getPrime(1024)

# 设置公开的加密指数 e
e = 65537  # RSA 的常用公开指数

# 计算 n，即 p 和 q 的乘积，作为 RSA 公钥的一部分
n = p * q
print(n)  # 输出 n 的值

# 将 flag 转换为长整型数值 m
m = bytes_to_long(flag)  # 将字符串 flag 转为对应的长整型

# 使用 RSA 算法加密消息 m，得到密文 c
c = pow(m, e, n)  # 计算 c = m^e mod n
print(c, e, n)  # 输出密文 c，加密指数 e，模数 n

# 重新生成一个新的质数 p，用于构造不同的 n
p = getPrime(1024)
e = 65537  # 公开指数保持不变

# 使用相同的 q 计算新的 n
n = p * q
c = pow(m, e, n)  # 使用新的 n 对相同的消息 m 加密，得到新的密文 c
print(c, e, n)  # 输出新的密文 c，加密指数 e，模数 n

"""
output:


3829060039572042737496679186881067950328956133163629908872348108160129550437697677150599483923925798224328175594483217938833520220087230303470138525970468915511111320396185482564783975435346354440035776909781158407636044986403819840648379609630039348895415045723208843631191252142600667607807479954194447237061080618370787672720344741413537975922184859333432197766580150534457001196765621678659952108010596273244230812327182786329760844037149719587269632133595149294067490955644893402708720284179715002149224068928828656515326446881791228638008572889331511945042911372915003805505412099102954073299010951896955362470 65537 14624662628725820618622370803948630854094687814338334827462870357582795291844925274690253604919535785934208081825425541536057550227048399837243392490762167733083030368221240764693694321150104306044125934201699430146970466657410999261630825931178731857267599750324918610790098952520113593130245010530961350592735239454337631927669542026935873535964487595433984902529960726655481696404006628917922241666148082741874033756970724357470539589848548704573091633917869387239324447730587545472564561496724882799495186768858324490838169123077051890332313671220385830444331578674338014080959653201802476516237464651809255679979
"""

# 解密
n1 = "14967030059975114950295399874185047053736587880127990542035765201425779342430662517765063258784685868107066789475747180244711352646469776732938544641583842313791872986357504462184924075227433498631423289187988351475666785190854210389587594975456064984611990461126684301086241532915267311675164190213474245311019623654865937851653532870965423474555348239858021551589650169602439423841160698793338115204238140085738680883313433574060243600028500600824624358473403059597593891412179399165813622512901263380299561019624741488779367019389775786547292065352885007224239581776975892385364446446185642939137287519945974807727"
n2 = "14624662628725820618622370803948630854094687814338334827462870357582795291844925274690253604919535785934208081825425541536057550227048399837243392490762167733083030368221240764693694321150104306044125934201699430146970466657410999261630825931178731857267599750324918610790098952520113593130245010530961350592735239454337631927669542026935873535964487595433984902529960726655481696404006628917922241666148082741874033756970724357470539589848548704573091633917869387239324447730587545472564561496724882799495186768858324490838169123077051890332313671220385830444331578674338014080959653201802476516237464651809255679979"
c1 = "2482083893746618248544426737023750400124543452082436334398504986023501710639402060949106693279462896968839029712099336235976221571564642900240827774719199533124053953157919850838214021934907480633441577316263853011232518392904983028052155862154264401108124968404098823946691811798952747194237290581323868666637357604693015079007555594974245559555518819140844020498487432684946922741232053249894575417796067090655122702306134848220257943297645461477488086804856018323986796999103385565540496534422406390355987976815450744535949785073009043007159496929187184338592859040917546122343981520508220332785862546608841127597"

# 通过 n1 和 n2 的最大公约数计算出公共的质数 q
q = math.gcd(int(n1), int(n2))  # 求 n1 和 n2 的最大公约数 q
p = int(n1) // q  # 根据 n1 和 q 计算出另一个质数 p

# 计算 n1 对应的欧拉函数 φ(n)
phi_n = (p - 1) * (q - 1)

# 计算私钥 d，即 e 的模 φ(n) 的逆
e = 65537
d = inverse(e, phi_n)

m = pow(int(c), d, int(n1))  # 使用私钥解密，得到明文 m

# 输出解密后的长整型数值 m
print(m)

# 将 m 转换回字节形式的 flag
flag_bytes = long_to_bytes(m)  # 将解密出的长整型数值转为字节

# 如果 flag 是字符串，可以进行解码
flag = flag_bytes.decode("utf-8")  # 假设 flag 是 UTF-8 编码的字符串

# 输出解密后的 flag
print(flag)